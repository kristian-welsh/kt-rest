/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package rest.framework

import kotlin.collections.*

class HttpMethod(string: String) {
	companion object {
		val get = HttpMethod("get")
		val post = HttpMethod("post")
		val delete = HttpMethod("delete")
	}
}

class Endpoint<T>(path: String){
	private val PATH_START = "root/"
	val path = PATH_START + path

	val map: MutableMap<HttpMethod, ()->Response<*>> = mutableMapOf()

	fun recieveGet(): Response<T> {
		return callLambdaFor(HttpMethod.get)
	}

	fun recievePost(): Response<String> {
		return callLambdaFor(HttpMethod.post)
	}
	
	fun recieveDelete(): Response<Unit> {
		return callLambdaFor(HttpMethod.delete)
	}
	
	fun get(lambda: ()->Response<T> ) {
		map.put(HttpMethod.get, lambda)
	}

	fun post(lambda: ()->Response<String> ) {
		map.put(HttpMethod.post, lambda)
	}

	fun delete(lambda: ()->Response<Unit> ) {
		map.put(HttpMethod.delete, lambda)
	}

	private fun <A: Response<*>> callLambdaFor(method: HttpMethod): A {
		val lambda = map.get(method) as ()->A
		return lambda()
	}
}



class Request(rawData: Int?) {
	// THIS IS REQUEST, NOT RESPONSE
}

class Response<T>(public val payload: T? = null) {

	fun body():String {
		// serialize payload here
		return ""
	}

	companion object {
		fun <U> response201(message: U):Response<U> {
			return Response(message)
		}
		fun <U> response200(character: U?):Response<U> {
			return Response(character)
		}
		fun response204(): Response<Unit> {
			return Response(null)
		}
	}
}

class WebClient {
}

class WebServer(val path: String, val client: WebClient?) {
	fun start() {
		//val incoming = client?.listen()
		//val request = Request(incoming)
		//val response = responseFor<Character>(request)
		//client?.respond(response)
	}
	
	fun <T> responseFor(request: Request?): Response<T> {
		return Response(null)
	}

	fun addEndpoint(endpoint: Endpoint<Character>) {
	}
}

fun main() {
}

